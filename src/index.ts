import fs from "fs"
import os from "os"

import { app, BrowserWindow, ipcMain } from "electron"
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit()
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 500,
    width: 500,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: false,
      nodeIntegration: true,
    },
    autoHideMenuBar: true,
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // Open the DevTools.
  // mainWindow.webContents.openDevTools()
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit()
  }
})

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.on("getLatestSavefile", (event, _args) => {
  // First find user's steam id, so we can access the right directory
  // We assume only one user has ever played this game on this computer
  const saveDirs = fs.readdirSync(
    "C:\\Users\\seanm\\AppData\\LocalLow\\Endnight\\SonsOfTheForest\\Saves"
  )
  const steamId = saveDirs.reduce((_acc, d) => d, "")

  // Loop through save directories and check the last updated dates for the files inside each one
  // We want to find out what the save directory is with the most recently written files
  fs.readdir(
    `C:\\Users\\${
      os.userInfo().username
    }\\AppData\\LocalLow\\Endnight\\SonsOfTheForest\\Saves\\${steamId}\\Multiplayer`,
    (_error, files) => {
      let latestDirectoryName: string | null = null
      let latestDirectoryTime: Date | null = null

      files.map((f) => {
        const filePath = `C:\\Users\\${
          os.userInfo().username
        }\\AppData\\LocalLow\\Endnight\\SonsOfTheForest\\Saves\\${steamId}\\Multiplayer\\${f}\\FurnitureStorageSaveData.json`
        try {
          const stats = fs.statSync(filePath)

          if (
            latestDirectoryName == null ||
            latestDirectoryTime < stats.mtime
          ) {
            latestDirectoryName = f
            latestDirectoryTime = stats.mtime
          }
        } catch (error) {
          console.log(error)
        }
      })
      const result = {
        steamId,
        latestDirectoryName,
      }
      event.sender.send("setLatestSaveFile", result)
    }
  )
})
